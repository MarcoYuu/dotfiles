"------------------------------------------------------
" 補完設定
"------------------------------------------------------
filetype plugin on
filetype indent off

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!

" 補完ウィンドウの設定
set completeopt=menuone

function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction
if s:meet_neocomplete_requirements()
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0

	" 起動時に有効化
	let g:neocomplete#enable_at_startup            = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplete#enable_smart_case            = 1
	" 大文字小文字の区別を無視する
	let g:neocomplete#enable_ignore_case           = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplete#max_list                     = 20

	let g:neocomplete#sources#syntax#min_keyword_length            = 3
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	let g:neocomplete#enable_fuzzy_completion = 1

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplete#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplete#complete_common_string()

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplete#smart_close_popup() . "\<CR>"
	endfunction

	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)

	" Enable omni completion.
	augroup MyGroup
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	if !exists('g:neocomplete#force_omni_input_patterns')
		let g:neocomplete#force_omni_input_patterns = {}
	endif
	let g:neocomplete#force_overwrite_completefunc = 1
	let g:neocomplete#force_omni_input_patterns.c =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.cpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:neocomplete#force_omni_input_patterns.objc =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.objcpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:clang_complete_auto = 0
	let g:clang_auto_select = 0
else
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" 起動時に有効化
	let g:neocomplcache_enable_at_startup            = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplcache_enable_smart_case            = 1
	" 大文字小文字の区別を無視する
	let g:neocomplcache_enable_ignore_case           = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplcache_max_list                     = 20
	" シンタックスをキャッシュするときの最小文字長
	let g:neocomplcache_min_syntax_length            = 3
	let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

	" Enable heavy features.
	" _区切りの補完を有効化
	let g:neocomplcache_enable_underbar_completion   = 1
	" キャメルケースでの補完有効化
	let g:neocomplcache_enable_camel_case_completion = 1

	" Define dictionary.
	let g:neocomplcache_dictionary_filetype_lists = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplcache_keyword_patterns')
		let g:neocomplcache_keyword_patterns = {}
	endif
	let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

	" Plugin key-mappings.
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplcache#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplcache#complete_common_string()
	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
	endfunction

	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)

	" Enable omni completion.
	augroup MyGroup
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplcache_omni_patterns = {}
	endif
	let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	" add neocomplcache option
	let g:neocomplcache_force_overwrite_completefunc=1
	let g:neocomplcache_clang_use_library=1

	if !exists("g:neocomplcache_force_omni_patterns")
		let g:neocomplcache_force_omni_patterns = {}
	endif

	" omnifunc が呼び出される場合の正規表現パターンを設定しておく
	let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'

	" clang_complete 側の設定
	" clang_complete の自動呼び出しは必ず切っておいて下さい
	" これを設定しておかなければ補完がおかしくなります
	let g:clang_complete_auto = 0_
	let g:clang_use_library   = 1_
	let g:clang_library_path  = '/usr/lib/'
	let g:clang_user_options  = '-std=c++11'
endif
