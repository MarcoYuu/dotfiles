"-----------------------------------------------------------
" NeoBundle よるプラグインのロード
" ------------------------------------------------------------

" プラグインの読み込み

" 日本語ヘルプ
NeoBundle 'vim-jp/vimdoc-ja'

" NeoBundle "{{{
"
" Neobundle自体を更新
NeoBundleFetch 'Shougo/neobundle.vim'

" Neobundlelazyを生成
NeoBundleLazy 'LeafCage/nebula.vim', {
			\ 'autoload' : {'commands' : 'NebulaPutLazy'},
			\ }
"}}}

" Unite "{{{
" 本体
NeoBundle 'Shougo/unite.vim'

" sudo
NeoBundle 'Shougo/unite-sudo'

" アウトライン表示
NeoBundle 'Shougo/unite-outline'

" カラースキーム一覧表示に Unite.vim を使う
NeoBundle 'ujihisa/unite-colorscheme'

" VCSのUnite
NeoBundle 'hrsh7th/vim-versions'

" QuickFixを見やすく
NeoBundle 'osyo-manga/unite-quickfix'

" ビルド(make)を行う
NeoBundleLazy 'Shougo/unite-build', { 'autoload' : {
			\ 'unite_sources' : 'build',
			\ }}

" ssh
NeoBundleLazy 'Shougo/unite-ssh', { 'autoload' : {
			\ 'filetypes' : 'vimfiler',
			\ 'unite_sources' : 'ssh',
			\ }}

" font
NeoBundleLazy 'ujihisa/unite-font', {
			\ 'gui' : 1,
			\ 'autoload' : {
			\  'unite_sources' : 'font'
			\ }}
"}}}

" QuickFix "{{{
"
" QuickFixから一気に置換
NeoBundleLazy 'thinca/vim-qfreplace', { 'autoload' : {
			\ 'filetypes' : ['unite', 'quickfix', 'qf'],
			\ }}

" その場で実行して試す
NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = {
			\   "_" : {
			\       "hook/unite_quickfix/enable_failure" : 1,
			\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
			\       "hook/close_quickfix/enable_exit" : 1,
			\       "hook/close_buffer/enable_failure" : 1,
			\       "hook/close_buffer/enable_empty_data" : 1,
			\       "hook/shabadoubi_touch_henshin/enable" : 1,
			\       "hook/shabadoubi_touch_henshin/wait" : 20,
			\       "outputter" : "multi:buffer:quickfix",
			\       "outputter/buffer/split" : ":botright",
			\       "outputter/buffer/close_on_empty" : 1,
			\       "runner" : "vimproc",
			\       "runner/vimproc/updatetime" : 60
			\   },
			\   "make" : {
			\       "command" : "make",
			\       "exec" : "%c %o",
			\       "outputter" : "error:buffer:quickfix",
			\       "runner" : "vimproc",
			\   },
			\}
if executable("clang++")
	let g:quickrun_config = {}
	let g:quickrun_config['cpp/clang++11'] = {
				\ 'cmdopt': '--std=c++11 --stdlib=libc++',
				\ 'type': 'cpp/clang++'
				\ }
	let g:quickrun_config['cpp'] = {'type': 'cpp/clang++11'}
endif

" QuickRun Hooks
NeoBundle 'osyo-manga/shabadou.vim'

" }}}

" 基礎ツール "{{{

" バイナリ
NeoBundle 'Shougo/vinarise.vim'

" ファイラ
NeoBundle 'Shougo/vimfiler'

" 非同期処理化プラグイン
NeoBundle 'Shougo/vimproc', {
			\ 'build' : {
			\     'windows' : 'make -f make_mingw32.mak',
			\     'cygwin' : 'make -f make_cygwin.mak',
			\     'mac' : 'make -f make_mac.mak',
			\     'unix' : 'make -f make_unix.mak',
			\    },
			\ }

" シェル {{{
NeoBundle 'Shougo/vimshell'

" ssh
NeoBundleLazy 'ujihisa/vimshell-ssh', { 'autoload' : {
			\ 'filetypes' : 'vimshell',
			\ }}
"}}}

"}}}

" 基本機能拡張 "{{{

" バッファ一覧
NeoBundleLazy 'buffet.vim', {
			\ 'autoload': {
			\ 'commands': ['Bufferlistsw', 'Bufferlist']}}

" 置換操作をヴィジュアライズ
NeoBundle 'osyo-manga/vim-over'
"}}}

" 表示 "{{{

" カーソル下の単語をハイライト
NeoBundle 't9md/vim-quickhl'

" 折りたたみ支援
NeoBundle 'LeafCage/foldCC'

" エラーのハイライト,
NeoBundle "jceb/vim-hier"

" フォント拡大
NeoBundleLazy 'thinca/vim-fontzoom', {
			\ 'gui' : 1,
			\ 'autoload' : {
			\  'mappings' : [
			\   ['n', '<Plug>(fontzoom-larger)'],
			\   ['n', '<Plug>(fontzoom-smaller)']]
			\ }}

" ディレクトリをツリー表示
NeoBundleLazy 'scrooloose/nerdtree', {
			\'autoload': { 'commands': ['NERDTree']}}

" Tagをツリー表示
NeoBundle 'taglist.vim'
set tags=tags

" ステータスバーかっこ良く機能的に {{{
" NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'itchyny/lightline.vim'
" 常にタブラインを表示
set showtabline=2
" lightline.vim
let g:lightline = {
			\ 'mode_map': {'c': 'NORMAL'},
			\ 'active': {
			\   'left': [
			\     ['mode', 'paste'],
			\     ['fugitive', 'gitgutter', 'filename'],
			\   ],
			\   'right': [
			\     ['lineinfo', 'syntastic'],
			\     ['percent'],
			\     ['fileformat', 'fileencoding', 'filetype'],
			\   ]
			\ },
			\ 'component': {
			\   'lineinfo': ' %3l:%-2v',
			\ },
			\ 'component_function': {
			\   'modified': 'MyModified',
			\   'readonly': 'MyReadonly',
			\   'fugitive': 'MyFugitive',
			\   'filename': 'MyFilename',
			\   'fileformat': 'MyFileformat',
			\   'filetype': 'MyFiletype',
			\   'fileencoding': 'MyFileencoding',
			\   'mode': 'MyMode',
			\   'charcode': 'MyCharCode',
			\   'gitgutter': 'MyGitGutter',
			\ },
			\ 'componet_expand': {
			\   'syntastic': 'SyntasticStatuslineFlag'
			\ },
			\ 'componet_type': {
			\   'syntastic': 'error'
			\ },
			\ 'separator': {'left': '⮀', 'right': '⮂'},
			\ 'subseparator': {'left': '⮁', 'right': '⮃'}
			\ }
let g:syntastic_mode_map = { 'mode': 'passive' }

" 表示関数 "{{{
function! s:syntastic()
	SyntasticCheck
	call lightline#update()
endfunction

function! MyModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFugitive()
	try
		if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
			let _ = fugitive#head()
			return strlen(_) ? '⭠ '._ : ''
		endif
	catch
	endtry
	return ''
endfunction

function! MyGitGutter()
	if ! exists('*GitGutterGetHunkSummary')
				\ || ! get(g:, 'gitgutter_enabled', 0)
				\ || winwidth('.') <= 90
		return ''
	endif
	let symbols = [
				\ g:gitgutter_sign_added . '',
				\ g:gitgutter_sign_modified . '',
				\ g:gitgutter_sign_removed . ''
				\ ]
	let hunks = GitGutterGetHunkSummary()
	let ret = []
	for i in [0, 1, 2]
		if hunks[i] > 0
			call add(ret, symbols[i] . hunks[i])
		endif
	endfor
	return join(ret, ' ')
endfunction

function! MyFilename()
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
				\  &ft == 'unite' ? unite#get_status_string() :
				\  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
				\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFileformat()
	return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
	if winwidth('.') <= 70
		return ''
	endif

	" Get the output of :ascii
	redir => ascii
	silent! ascii
	redir END

	if match(ascii, 'NUL') != -1
		return 'NUL'
	endif

	" Zero pad hex values
	let nrformat = '0x%02x'

	let encoding = (&fenc == '' ? &enc : &fenc)

	if encoding == 'utf-8'
		" Zero pad with 4 zeroes in unicode files
		let nrformat = '0x%04x'
	endif

	" Get the character and the numeric value from the return value of :ascii
	" This matches the two first pieces of the return value, e.g.
	" "<F>  70" => char: 'F', nr: '70'
	let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

	" Format the numeric value
	let nr = printf(nrformat, nr)

	return "'". char ."' ". nr
endfunction
"}}}
"}}}

"}}}

" 入力補助 "{{{

" コメントアウト
NeoBundle "tyru/caw.vim"

" 英単語のスペル補完
NeoBundle 'ujihisa/neco-look'

" ZenCoding記法
NeoBundle 'mattn/emmet-vim'

" Doxygenコメントを追加する
NeoBundleLazy 'DoxygenToolkit.vim', {
			\ 'autoload': {
			\ 'commands': ['DoxUndoc', 'DoxAuthor', 'Dox', 'DoxLic', 'DoxBlock']}}

" Clangでフォーマット
NeoBundleLazy 'rhysd/vim-clang-format', {
			\'autoload': {
			\'commands': ['ClangFormat', 'ClangFormatEchoFormattedCode']}}

" テキスト囲み "{{{
NeoBundle 'anyakichi/vim-surround', {
			\ 'autoload' : {
			\   'mappings' : [
			\     ['n', '<Plug>Dsurround'], ['n', '<Plug>Csurround'],
			\     ['n', '<Plug>Ysurround'], ['n', '<Plug>YSurround']
			\ ]}}
if !&l:modifiable
	silent! nunmap <buffer> ds
	silent! nunmap <buffer> cs
	silent! nunmap <buffer> ys
	silent! nunmap <buffer> yS
else
	nmap <buffer> ds <Plug>Dsurround
	nmap <buffer> cs <Plug>Csurround
	nmap <buffer> ys <Plug>Ysurround
	nmap <buffer> yS <Plug>YSurround
endif
"}}}

" 一気にジャンプ "{{{
NeoBundle 'Lokaltog/vim-easymotion'
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key=","
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
"}}}

" 位置揃え "{{{
NeoBundle 'h1mesuke/vim-alignta'
" Unite用Alignta設定
let g:unite_source_alignta_preset_arguments = [
			\ ["Align at '='", '=>\='],
			\ ["Align at ':'", '01 :'],
			\ ["Align at '|'", '|'   ],
			\ ["Align at ')'", '0 )' ],
			\ ["Align at ']'", '0 ]' ],
			\ ["Align at '}'", '}'   ],
			\]

let s:comment_leadings = '^\s*\("\|#\|/\*\|//\|<!--\)'
let g:unite_source_alignta_preset_options = [
			\ ["Justify Left",      '<<' ],
			\ ["Justify Center",    '||' ],
			\ ["Justify Right",     '>>' ],
			\ ["Justify None",      '==' ],
			\ ["Shift Left",        '<-' ],
			\ ["Shift Right",       '->' ],
			\ ["Shift Left  [Tab]", '<--'],
			\ ["Shift Right [Tab]", '-->'],
			\ ["Margin 0:0",        '0'  ],
			\ ["Margin 0:1",        '01' ],
			\ ["Margin 1:0",        '10' ],
			\ ["Margin 1:1",        '1'  ],
			\
			\ 'v/' . s:comment_leadings,
			\ 'g/' . s:comment_leadings,
			\]
unlet s:comment_leadings
"}}}

" 補完とスニペット "{{{

" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets'

" 補完 "{{{

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" 補完ウィンドウの設定
set completeopt=menuone

" 補完プラグインの対応判定 "{{{
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction
if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif
"}}}

" LUA サポートあり "{{{
if s:meet_neocomplete_requirements()
	" 環境設定 "{{{

	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0

	" 起動時に有効化
	let g:neocomplete#enable_at_startup            = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplete#enable_smart_case            = 1
	" 大文字小文字の区別を無視する
	let g:neocomplete#enable_ignore_case           = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplete#max_list                     = 20

	let g:neocomplete#sources#syntax#min_keyword_length            = 2
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	let g:neocomplete#enable_fuzzy_completion = 1

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'
	"}}}

	" キーマッピング "{{{
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplete#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplete#complete_common_string()

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplete#smart_close_popup() . "\<CR>"
	endfunction

	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)
	"}}}

	" オムニ補完 "{{{
	augroup SetOmniFunc
		autocmd!
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" marchin.vim
	" --------------------------------------------------------
	" 非同期ではなくて同期処理で補完する
	"let g:marching_backend = "sync_clang_command"

	" オプションの設定
	" これは clang のコマンドに渡される
	"let g:marching_clang_command_option="-std=c++1y"

	" neocomplete.vim と併用して使用する場合
	" neocomplete.vim を使用すれば自動補完になる
	"let g:marching_enable_neocomplete = 1

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	if !exists('g:neocomplete#force_omni_input_patterns')
		let g:neocomplete#force_omni_input_patterns = {}
	endif
	let g:neocomplete#force_overwrite_completefunc = 1
	let g:neocomplete#force_omni_input_patterns.c =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.cpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:neocomplete#force_omni_input_patterns.objc =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.objcpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:clang_complete_auto = 0
	let g:clang_auto_select = 0
	"}}}
	"}}}
	" LUA サポートなし "{{{
else
	" 環境設定 "{{{
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" 起動時に有効化
	let g:neocomplcache_enable_at_startup            = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplcache_enable_smart_case            = 1
	" 大文字小文字の区別を無視する
	let g:neocomplcache_enable_ignore_case           = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplcache_max_list                     = 20
	" シンタックスをキャッシュするときの最小文字長
	let g:neocomplcache_min_syntax_length            = 3
	let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

	" Enable heavy features.
	" _区切りの補完を有効化
	let g:neocomplcache_enable_underbar_completion   = 1
	" キャメルケースでの補完有効化
	let g:neocomplcache_enable_camel_case_completion = 1

	" Define dictionary.
	let g:neocomplcache_dictionary_filetype_lists = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplcache_keyword_patterns')
		let g:neocomplcache_keyword_patterns = {}
	endif
	let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
	"}}}

	" キーマッピング "{{{
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplcache#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplcache#complete_common_string()
	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
	endfunction

	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)
	"}}}

	" オムニ補完 "{{{
	augroup SetOmniFunc
		autocmd!
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplcache_omni_patterns = {}
	endif
	let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	" add neocomplcache option
	let g:neocomplcache_force_overwrite_completefunc=1
	let g:neocomplcache_clang_use_library=1

	if !exists("g:neocomplcache_force_omni_patterns")
		let g:neocomplcache_force_omni_patterns = {}
	endif

	" omnifunc が呼び出される場合の正規表現パターンを設定しておく
	let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'

	" clang_complete 側の設定
	" clang_complete の自動呼び出しは必ず切っておいて下さい
	" これを設定しておかなければ補完がおかしくなります

	let g:clang_complete_auto = 0
	let g:clang_use_library   = 1
	let g:clang_library_path  = '/usr/lib/llvm-3.5/lib/'
	let g:clang_user_options  = '-std=c++11'
endif
"}}}
"}}}
"}}}

" clangによるC/C++の補完
" NeoBundle 'osyo-manga/neocomplcache-clang_complete'
" NeoBundle 'Rip-Rip/clang_complete'
"NeoBundle "osyo-manga/vim-marching"
"}}}

" vim-operator "{{{
NeoBundle 'kana/vim-operator-user', {
			\ 'autoload' : {
			\   'functions' : 'operator#user#define',
			\ }}
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'kana/vim-textobj-indent'
NeoBundleLazy 'kana/vim-smartchr', { 'autoload' : {
			\ 'insert' : 1,
			\ }}
NeoBundleLazy 'kana/vim-smartword', { 'autoload' : {
			\ 'mappings' : [
			\   '<Plug>(smartword-']
			\ }}
NeoBundleLazy 'kana/vim-smarttill', { 'autoload' : {
			\ 'mappings' : [
			\   '<Plug>(smarttill-']
			\ }}
NeoBundleLazy 'kana/vim-operator-replace', {
			\ 'depends' : 'vim-operator-user',
			\ 'autoload' : {
			\   'mappings' : [
			\     ['nx', '<Plug>(operator-replace)']]
			\ }}
map R  <Plug>(operator-replace)
"}}}

"}}}

" 開発ツール "{{{
"
" Tagsファイル生成(rubyとか向け)
NeoBundleLazy 'alpaca-tc/alpaca_tags', {
      \ 'rev' : 'development',
      \ 'depends': ['Shougo/vimproc', 'Shougo/unite.vim'],
      \ 'autoload' : {
      \   'commands' : ['Tags', 'TagsUpdate', 'TagsSet', 'TagsBundle', 'TagsCleanCache'],
      \   'unite_sources' : ['tags']
      \ }}
" ~/.ctagsにctagsの設定ファイルを設置します。現在無い人は、このディレクトリ内の.ctagsをコピーしてください。
" 適切なlanguageは`ctags --list-maps=all`で見つけてください。人によりますので。
let g:alpaca_update_tags_config = {
      \ '_' : '-R --sort=yes --languages=-js,html,css',
      \ 'ruby': '--languages=+Ruby',
      \ }
augroup AlpacaTags
  autocmd!
  if exists(':Tags')
    autocmd BufWritePost * TagsUpdate ruby
    autocmd BufWritePost Gemfile TagsBundle
    autocmd BufEnter * TagsSet
  endif
augroup END
nnoremap <expr>tt  ':Unite tags -horizontal -buffer-name=tags -input='.expand("<cword>").'<CR>'

" Android開発
" LogCat
NeoBundleLazy 'thinca/vim-logcat', {
			\ 'autoload': {
			\ 'commands': ['LogcatClear', 'Logcat']}}
NeoBundle 'hsanson/vim-android'
let g:android_sdk_path='/opt/android-studio/sdk'

" pythonのシンタックスチェック(QuickFix On/Off)
NeoBundle 'mitechie/pyflakes-pathogen'
let pyflakes_use_quickfix = 0

" ソースヘッダ切り替え
NeoBundle 'a.vim'

" 最新のC++シンタックス情報
NeoBundle 'vim-jp/cpp-vim'

" #ifdef highlight
NeoBundle 'vim-scripts/ifdef-highlighting'

" JSON
NeoBundle 'elzr/vim-json'
NeoBundle '5t111111/neat-json.vim'

" ctags情報から型をハイライト
NeoBundle 'TagHighlight'
" augroup Highlight
" 	autocmd!
" 	au BufNewFile *.php,*.py,*.pyc,*.h,*.c,*.cc,*.cpp,*.ipp,*.hpp UpdateTypesFile
" 	au BufRead *.php,*.py,*.pyc,*.h,*.c,*.cc,*.cpp,*.ipp,*.hpp UpdateTypesFile
" 	au TabEnter *.php,*.py,*.pyc,*.h,*.c,*.cc,*.cpp,*.ipp,*.hpp UpdateTypesFile
" augroup END

" syntacs check "{{{
NeoBundle 'scrooloose/syntastic'
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntastic_c_include_dirs = ['./','/usr/include/','/usr/local/include/','/usr/include/c++/4.8/']
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_include_dirs = ['./','/usr/include/','/usr/local/include/','/usr/include/c++/4.8/']
if executable("clang++")
	let g:syntastic_cpp_compiler = 'clang++'
	let g:syntastic_cpp_compiler_options = '--std=c++11 --stdlib=libc++'
endif
augroup AutoSyntastic
	autocmd!
	autocmd BufWritePost *.c,*.cpp,*.cc,*.h,*.hpp,*.ipp,*.hh call s:syntastic()
augroup END
"}}}

"}}}

" バージョン管理 "{{{

" Gitのいろいろ
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_removed = '-'

NeoBundleLazy 'Shougo/vim-vcs', {
			\ 'depends' : 'thinca/vim-openbuf',
			\ 'autoload' : {'commands' : 'Vcs'},
			\ }

NeoBundleLazy 'yomi322/vim-gitcomplete', { 'autoload' : {
			\ 'filetype' : 'vimshell'
			\ }}

"}}}

" その他独立ツール "{{{

" Twitter
NeoBundleLazy 'basyura/TweetVim', { 'depends' :
			\ ['basyura/twibill.vim', 'tyru/open-browser.vim'],
			\ 'autoload' : { 'commands' : 'TweetVimHomeTimeline' }}

" UNDO履歴
NeoBundleLazy 'sjl/gundo.vim', { 'autoload' : {
			\ 'commands' : 'GundoToggle'
			\ }}

" リファレンス
NeoBundle 'thinca/vim-ref'

" excite翻訳
NeoBundleLazy 'mattn/excitetranslate-vim', {
			\ 'depends' : 'mattn/webapi-vim',
			\ 'autoload': {'commands': ['ExciteTranslate']}}
NeoBundle 'mattn/webapi-vim'

" Markdown for vim
NeoBundle 'kannokanno/previm'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'tyru/open-browser.vim'

" TeX用Plugin "{{{
NeoBundleLazy 'jcf/vim-latex', {
			\ 'autoload': {	'filetypes': [ 'latex', 'tex' ] }}
"------------------------------------------------------
" TeX用設定
"------------------------------------------------------
"-------------------------------------------------
" \ll 				:compile and generate dvi or pdf
" :TTarget pdf		:switch target to pdf
" \lv				:view dvi or pdf
"-------------------------------------------------

set shellslash
set grepprg=grep\ -nH\ $*
let g:Tex_SmartKeyQuote 			  = 0
let g:tex_flavor                      = 'latex'
let g:Imap_UsePlaceHolders            = 1
let g:Imap_DeleteEmptyPlaceHolders    = 1
let g:Imap_StickyPlaceHolders         = 0
let g:Tex_DefaultTargetFormat         = 'pdf'
let g:Tex_FormatDependency_ps         = 'dvi,ps'
let g:Tex_FormatDependency_pdf        = 'dvi,pdf'
let g:Tex_CompileRule_dvi             = 'platex -synctex=1 -src-specials -interaction=nonstopmode $*'
let g:Tex_CompileRule_ps              = 'dvips -Ppdf -t a4 -o $*.ps $*.dvi'
let g:Tex_CompileRule_pdf             = 'dvipdfmx $*.dvi'
let g:Tex_BibtexFlavor                = 'pbibtex'
let g:Tex_MakeIndexFlavor             = 'mendex $*.idx'
let g:Tex_UseEditorSettingInDVIViewer = 1
let g:Tex_ViewRule_dvi                = 'evince'
let g:Tex_ViewRule_ps                 = 'evince'
let g:Tex_ViewRule_pdf                = 'evince'
"}}}

"}}}

" カラースキーマ "{{{
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'cschlueter/vim-wombat'
NeoBundle 'croaker/mustang-vim'
NeoBundle 'jeffreyiacono/vim-colors-wombat'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'vim-scripts/Lucius'
NeoBundle 'vim-scripts/Zenburn'
NeoBundle 'mrkn/mrkn256.vim'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'therubymug/vim-pyte'
NeoBundle 'tomasr/molokai'
NeoBundle 'bandit.vim'
NeoBundle 'abudden/EasyColour' , { 'rev' : '9d683aec8' }
"}}}







