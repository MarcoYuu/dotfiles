scriptencoding utf-8
" -----------------------------------------------------------
" NeoBundle よるプラグインのロード
" ------------------------------------------------------------

" プラグインの読み込み

" 日本語ヘルプ
NeoBundle 'vim-jp/vimdoc-ja'

" NeoBundle {{{
"
" Neobundle自体を更新
NeoBundleFetch 'Shougo/neobundle.vim'

" Neobundlelazyを生成
NeoBundleLazy 'LeafCage/nebula.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'NebulaPutLazy',
			\            'NebulaPutFromClipboard',
			\            'NebulaYankOptions',
			\            'NebulaYankConfig',
			\            'NebulaPutConfig',
			\            'NebulaYankTap'
			\        ]
			\    }
			\}
nnoremap <silent>,bl	:<C-u>NebulaPutLazy<CR>
nnoremap <silent>,bc	:<C-u>NebulaPutConfig<CR>
nnoremap <silent>,by	:<C-u>NebulaYankOptions<CR>
nnoremap <silent>,bp	:<C-u>NebulaPutFromClipboard<CR>
"}}}

" Unite {{{
" 本体
NeoBundleLazy 'Shougo/unite.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithInput'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithCurrentDir'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UniteNext'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'Unite'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithInputDirectory'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithProjectDir'
			\            },
			\            {
			\                'complete': 'file',
			\                'name': 'UniteBookmarkAdd'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UniteFirst'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithBufferDir'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#source',
			\                'name': 'UniteWithCursorWord'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UniteClose'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UniteResume'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UnitePrevious'
			\            },
			\            {
			\                'complete': 'customlist,unite#complete#buffer_name',
			\                'name': 'UniteLast'
			\            }
			\        ],
			\        'unite_sources': [
			\            'action',
			\            'alias',
			\            'bookmark',
			\            'buffer',
			\            'change',
			\            'command',
			\            'directory',
			\            'file',
			\            'file_point',
			\            'find',
			\            'function',
			\            'grep',
			\            'history_input',
			\            'history_yank',
			\            'interactive',
			\            'jump',
			\            'jump_point',
			\            'launcher',
			\            'line',
			\            'mapping',
			\            'menu',
			\            'output',
			\            'process',
			\            'rec',
			\            'register',
			\            'resume',
			\            'runtimepath',
			\            'script',
			\            'source',
			\            'tab',
			\            'vimgrep',
			\            'window',
			\            'window_gui'
			\        ]
			\    }
			\}

" sudo
NeoBundleLazy 'Shougo/unite-sudo',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'sudo'
			\        ]
			\    }
			\}

" アウトライン表示
NeoBundleLazy 'Shougo/unite-outline',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(unite_source_outline_loop_cursor_'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'outline'
			\        ]
			\    }
			\}
nnoremap <silent><Leader>t :Unite -vertical -winwidth=30 -no-quit outline<CR>

" 最近のファイル
NeoBundleLazy 'Shougo/neomru.vim',
			\{
			\    'augroup': 'neomru',
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'file',
			\                'name': 'NeoMRUImportFile'
			\            },
			\            'NeoMRUSave',
			\            {
			\                'complete': 'file',
			\                'name': 'NeoMRUImportDirectory'
			\            },
			\            'NeoMRUReload'
			\        ],
			\        'unite_sources': [
			\            'mru',
			\            'neomru'
			\        ]
			\    }
			\}
let g:neomru#time_format = '(%Y/%m/%d %H:%M:%S)'

" カラースキーム一覧表示に Unite.vim を使う
NeoBundleLazy 'ujihisa/unite-colorscheme',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'colorscheme'
			\        ]
			\    }
			\}

" VCSのUnite
NeoBundleLazy 'hrsh7th/vim-versions',
			\{
			\    'autoload': {
			\        'commands': [
			\            'UniteVersions'
			\        ],
			\        'unite_sources': [
			\            'versions'
			\        ]
			\    }
			\}

" help
NeoBundleLazy 'tsukkee/unite-help',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'help'
			\        ]
			\    }
			\}
" Execute help.
nnoremap <C-h>	:<C-u>Unite -start-insert help<CR>
" Execute help by cursor keyword.
nnoremap <silent> g<C-h>  :<C-u>UniteWithCursorWord help<CR>

" tag
NeoBundleLazy 'tsukkee/unite-tag',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'tag'
			\        ]
			\    }
			\}

" script一覧
NeoBundleLazy 'zhaocai/unite-scriptnames',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'scriptnames'
			\        ]
			\    }
			\}

" QuickFixを見やすく
NeoBundleLazy 'osyo-manga/unite-quickfix',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'location_list',
			\            'q',
			\            'quickfix'
			\        ]
			\    }
			\}

" ビルド(make)を行う
NeoBundleLazy 'Shougo/unite-build',
			\{
			\    'autoload': {
			\        'unite_sources': 'build'
			\    }
			\}
" Uniteでビルド
if has('win32') || has('win64')
	nnoremap <Leader>bb :Unite -winheight=5 build<CR>
else
	nnoremap <Leader>bb :Unite build<CR>:q<CR>
endif

NeoBundle 'thinca/vim-editvar'
"}}}

" QuickFix {{{

" QuickFixから一気に置換
NeoBundleLazy 'thinca/vim-qfreplace',
			\{
			\    'autoload': {
			\        'filetypes': [
			\            'unite',
			\            'quickfix',
			\            'qf'
			\        ]
			\    }
			\}

" その場で実行して試す
NeoBundleLazy 'thinca/vim-quickrun' ,
			\{
			\    'autoload': {
			\        'commands': [
			\            'QuickRun'
			\        ]
			\    }
			\}
let g:quickrun_config =
			\{
			\    '_': {
			\        'hook/close_buffer/enable_empty_data': 1,
			\        'hook/close_buffer/enable_failure': 1,
			\        'hook/close_quickfix/enable_exit': 1,
			\        'hook/close_unite_quickfix/enable_hook_loaded': 1,
			\        'hook/shabadoubi_touch_henshin/enable': 1,
			\        'hook/shabadoubi_touch_henshin/wait': 20,
			\        'hook/unite_quickfix/enable_failure': 1,
			\        'outputter': 'multi:buffer:quickfix',
			\        'outputter/buffer/close_on_empty': 1,
			\        'outputter/buffer/split': ':botright',
			\        'runner': 'vimproc',
			\        'runner/vimproc/updatetime': 60
			\    },
			\    'make': {
			\        'command': 'make',
			\        'exec': '%c %o',
			\        'outputter': 'error:buffer:quickfix',
			\        'runner': 'vimproc'
			\    }
			\}
if executable('clang++')
	let g:quickrun_config = {}
	let g:quickrun_config['cpp/clang++11'] = {
				\ 'cmdopt': '--std=c++11 --stdlib=libc++',
				\ 'type': 'cpp/clang++'
				\ }
	let g:quickrun_config['cpp'] = {'type': 'cpp/clang++11'}
endif

" }}}

" 基礎ツール {{{

" ファイラ
NeoBundleLazy 'Shougo/vimfiler',
			\{
			\    'augroup': 'vimfiler',
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerCurrentDir'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'Read'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFiler'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerBufferDir'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerSimple'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerTab'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'Edit'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerExplorer'
			\            },
			\            'VimFilerClose',
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerCreate'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerSplit'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'Write'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'VimFilerDouble'
			\            },
			\            {
			\                'complete': 'customlist,vimfiler#complete',
			\                'name': 'Source'
			\            }
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(vimfiler_'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'vimfiler_drive',
			\            'vimfiler_execute',
			\            'vimfiler_history',
			\            'vimfiler_mask',
			\            'vimfiler_popd',
			\            'vimfiler_sort'
			\        ]
			\    }
			\}
nnoremap <silent><C-x><C-f> :VimFiler<CR>

" シェル
NeoBundleLazy 'Shougo/vimshell',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShell'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShellPop'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShellCreate'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShellCurrentDir'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#helpers#vimshell_execute_complete',
			\                'name': 'VimShellExecute'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShellBufferDir'
			\            },
			\            'VimShellSendString',
			\            {
			\                'complete': 'customlist,vimshell#complete',
			\                'name': 'VimShellTab'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#helpers#vimshell_execute_complete',
			\                'name': 'VimShellTerminal'
			\            },
			\            {
			\                'complete': 'customlist,vimshell#helpers#vimshell_execute_complete',
			\                'name': 'VimShellInteractive'
			\            },
			\            {
			\                'complete': 'buffer',
			\                'name': 'VimShellSendBuffer'
			\            }
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(vimshell_'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'vimshell_external_history',
			\            'vimshell_history',
			\            'vimshell_zsh_complete'
			\        ]
			\    }
			\}

" 非同期処理化プラグイン
NeoBundle 'Shougo/vimproc',
			\{
			\    'build': {
			\        'cygwin': 'make -f make_cygwin.mak',
			\        'mac': 'make -f make_mac.mak',
			\        'unix': 'make -f make_unix.mak',
			\        'windows': 'make -f make_mingw32.mak'
			\    }
			\}
"}}}

" 基本機能拡張 {{{
" 起動時に履歴表示
NeoBundle 'mhinz/vim-startify'
" startifyのヘッダー部分に表示する文字列を設定する(dateコマンドを実行して日付を設定している)
if !has('win32') || !has('win64')
	let g:startify_custom_header =
				\ map(split(system('date'), '\n'), '"	". v:val') + ['','']
end

" デフォルトだと、最近使ったファイルの先頭は数字なので、使用するアルファベットを指定
let g:startify_custom_indices = ['f', 'g', 'h', 'i', 'o', 'p']
" よく使うファイルをブックマークとして登録しておく
let g:startify_bookmarks = [
			\ '~/.vimrc',
			\ ]

" バッファ一覧
NeoBundleLazy 'buffet.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'Bufferlistsw',
			\            'Bufferlist'
			\        ]
			\    }
			\}

" 検索時にハイライト
NeoBundleLazy 'haya14busa/incsearch.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'IncSearchNoreMap',
			\            'IncSearchMap'
			\        ],
			\        'mappings': [
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-N)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-N)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-#)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-*)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-#)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-forward)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-*)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-stay)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-n)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-n)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl0)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-g#)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-backward)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(_incsearch-g*)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-g#)'
			\            ],
			\            [
			\                'sxno',
			\                '<Plug>(incsearch-nohl-g*)'
			\            ]
			\        ]
			\    }
			\}
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" 置換操作をヴィジュアライズ
NeoBundleLazy 'osyo-manga/vim-over',
			\{
			\    'autoload': {
			\        'commands': [
			\            'OverCommandLineNoremap',
			\            'OverCommandLineMap',
			\            'OverCommandLine'
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(over-restore-'
			\            ]
			\        ]
			\    }
			\}
" over.vimの起動
nnoremap <silent> <Leader>o :OverCommandLine<CR>
" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

NeoBundleLazy 'LeafCage/yankround.vim',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'xn',
			\                '<Plug>(yankround-'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'yankround'
			\        ]
			\    }
			\}
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

"}}}

" 表示 {{{

" インデントに色を付けて見やすくする
NeoBundle 'Yggdroot/indentLine'
" tab:\|\ ←最後にスペース
" set list lcs=tab:\¦\
" .vimrc.basicにて
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#708090'
let g:indentLine_char = '¦'
let g:indentLine_fileTypeExclude = ['help', 'nerdtree', 'calendar', 'thumbnail', 'tweetvim']
let g:indentLine_showFirstIndentLevel=1

" ログファイルを色づけしてくれる
NeoBundleLazy 'vim-scripts/AnsiEsc.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'DM',
			\            'RWP',
			\            'AnsiEsc',
			\            'RM',
			\            'SM',
			\            'WLR',
			\            'SWP'
			\        ],
			\        'mappings': [
			\            '<Plug>SaveWinPosn',
			\            '<Plug>RestoreWinPosn'
			\        ]
			\    }
			\}

" カーソル下の単語をハイライト
NeoBundleLazy 't9md/vim-quickhl',
			\{
			\    'augroup': 'QuickhlManual',
			\    'autoload': {
			\        'commands': [
			\            'QuickhlManualUnlockWindow',
			\            'QuickhlManualDelete',
			\            'QuickhlTagToggle',
			\            'QuickhlManualDisable',
			\            'QuickhlTagDisable',
			\            'QuickhlManualAdd',
			\            'QuickhlManualColors',
			\            'QuickhlManualReset',
			\            'QuickhlManualLockToggle',
			\            'QuickhlManualLock',
			\            'QuickhlManualEnable',
			\            'QuickhlManualList',
			\            'QuickhlCwordEnable',
			\            'QuickhlManualUnlock',
			\            'QuickhlCwordDisable',
			\            'QuickhlTagEnable',
			\            'QuickhlManualLockWindowToggle',
			\            'QuickhlManualLockWindow',
			\            'QuickhlCwordToggle'
			\        ],
			\        'mappings': [
			\            [
			\                'sxn',
			\                '<Plug>(quickhl-'
			\            ]
			\        ]
			\    }
			\}
" <Leader>m でカーソル下の単語、もしくは選択した範囲のハイライトを行う
" 再度 <Leader>m を行うとカーソル下のハイライトを解除する
" これは複数の単語のハイライトを行う事もできる
" <Leader>M で全てのハイライトを解除する
nmap <Leader>m <Plug>(quickhl-manual-this)
xmap <Leader>m <Plug>(quickhl-manual-this)
nmap <Leader>M <Plug>(quickhl-manual-reset)
xmap <Leader>M <Plug>(quickhl-manual-reset)

" 折りたたみ支援
NeoBundle 'LeafCage/foldCC.vim'

" エラーのハイライト,
NeoBundle 'cohama/vim-hier'

" フォント拡大
NeoBundleLazy 'thinca/vim-fontzoom',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(fontzoom-larger)'
			\            ],
			\            [
			\                'n',
			\                '<Plug>(fontzoom-smaller)'
			\            ]
			\        ]
			\    },
			\    'gui': 1
			\}

" ディレクトリをツリー表示
NeoBundleLazy 'scrooloose/nerdtree',
			\{
			\    'autoload': {
			\        'commands': [
			\            'NERDTree',
			\            'NERDTreeToggle'
			\        ]
			\    }
			\}
NeoBundleLazy 'scrooloose/nerdtree',
			\{
			\    'augroup': 'NERDTreeHijackNetrw',
			\    'autoload': {
			\        'commands': [
			\            'NERDTreeMirror',
			\            'NERDTreeClose',
			\            {
			\                'complete': 'dir',
			\                'name': 'NERDTree'
			\            },
			\            'NERDTreeFocus',
			\            {
			\                'complete': 'customlist,nerdtree#completeBookmarks',
			\                'name': 'NERDTreeFromBookmark'
			\            },
			\            {
			\                'complete': 'dir',
			\                'name': 'NERDTreeToggle'
			\            },
			\            'NERDTreeCWD',
			\            'NERDTreeFind'
			\        ]
			\    }
			\}
let NERDTreeWinSize=26
" ツリーをトグル
nmap <Leader>n :NERDTreeToggle<CR>

" Tagをツリー表示 :Tlist
NeoBundleLazy 'taglist.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'Tlist'
			\        ]
			\    }
			\}
set tags=tags
let tlist_tex_settings = 'latex;s:toc,s:frontmatter,s:mainmatter,s:backmatter,s:bibliography,'
			\. 's:part,s:chapter,s:section,s:subsection,s:subsubsection,g:graphic+listing,'
			\. 'l:label,r:ref,p:pageref'

" ステータスバーかっこ良く機能的に {{{
NeoBundle 'itchyny/lightline.vim'
" 常にタブラインを表示
set showtabline=2
let g:lightline = {
			\ 'mode_map': {'c': 'NORMAL'},
			\ 'active': {
			\	'left': [
			\	  ['mode', 'paste'],
			\	  ['fugitive', 'gitgutter', 'filename'],
			\	],
			\	'right': [
			\	  ['lineinfo', 'syntastic'],
			\	  ['percent'],
			\	  ['imestate', 'charcode', 'fileformat', 'fileencoding', 'filetype'],
			\	]
			\ },
			\ 'component': {
			\	'lineinfo': '⭡ %3l:%-2v',
			\ },
			\ 'component_function': {
			\	'modified': 'MyModified',
			\	'readonly': 'MyReadonly',
			\	'fugitive': 'MyFugitive',
			\	'filename': 'MyFilename',
			\	'fileformat': 'MyFileformat',
			\	'filetype': 'MyFiletype',
			\	'fileencoding': 'MyFileencoding',
			\	'mode': 'MyMode',
			\	'charcode': 'MyCharCode',
			\	'gitgutter': 'MyGitGutter',
			\	'imestate': 'MyIMStatus',
			\ },
			\ 'componet_expand': {
			\	'syntastic': 'SyntasticStatuslineFlag'
			\ },
			\ 'componet_type': {
			\	'syntastic': 'error'
			\ },
			\ 'separator': {'left': '⮀', 'right': '⮂'},
			\ 'subseparator': {'left': '⮁', 'right': '⮃'}
			\ }
let g:syntastic_mode_map = { 'mode': 'passive' }

" 表示関数 {{{
function! MyIMStatus()
	if exists('IMStatus')
		return IMStatus('[JP Fixed]')
	else
		return ''
	endif
endfunction

function! s:syntastic()
	SyntasticCheck
	call lightline#update()
endfunction

function! MyModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFugitive()
	try
		if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
			let _ = fugitive#head()
			return strlen(_) ? '⭠ '._ : ''
		endif
	catch
	endtry
	return ''
endfunction

function! MyGitGutter()
	if ! exists('*GitGutterGetHunkSummary')
				\ || ! get(g:, 'gitgutter_enabled', 0)
				\ || winwidth('.') <= 90
		return ''
	endif
	let symbols = [
				\ g:gitgutter_sign_added . '',
				\ g:gitgutter_sign_modified . '',
				\ g:gitgutter_sign_removed . ''
				\ ]
	let hunks = GitGutterGetHunkSummary()
	let ret = []
	for i in [0, 1, 2]
		if hunks[i] > 0
			call add(ret, symbols[i] . hunks[i])
		endif
	endfor
	return join(ret, ' ')
endfunction

function! MyFilename()
	return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
				\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
				\  &ft == 'unite' ? unite#get_status_string() :
				\  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
				\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
				\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFileformat()
	return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
	return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
	if winwidth('.') <= 70
		return ''
	endif

	" Get the output of :ascii
	redir => ascii
	silent! ascii
	redir END

	if match(ascii, 'NUL') != -1
		return 'NUL'
	endif

	" Zero pad hex values
	let nrformat = '0x%02x'

	let encoding = (&fenc == '' ? &enc : &fenc)

	if encoding == 'utf-8'
		" Zero pad with 4 zeroes in unicode files
		let nrformat = '0x%04x'
	endif

	" Get the character and the numeric value from the return value of :ascii
	" This matches the two first pieces of the return value, e.g.
	" "<F>	70" => char: 'F', nr: '70'
	let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

	" Format the numeric value
	let nr = printf(nrformat, nr)

	return "'". char ."' ". nr
endfunction
"}}}
"}}}

"}}}

" 入力補助 {{{

" コメントアウト
NeoBundle 'tyru/caw.vim'
" \c でカーソル行をコメントアウト
" 再度 \c でコメントアウトを解除
" 選択してから複数行の \c も可能
nmap <Leader>c <Plug>(caw:I:toggle)
vmap <Leader>c <Plug>(caw:I:toggle)
" \C でコメントアウトの解除
nmap <Leader>C <Plug>(caw:I:uncomment)
vmap <Leader>C <Plug>(caw:I:uncomment)

" 英単語のスペル補完
NeoBundle 'ujihisa/neco-look'

" ZenCoding記法
NeoBundleLazy 'mattn/emmet-vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'Emmet',
			\            'EmmetInstall'
			\        ]
			\    }
			\}

" Doxygenコメントを追加する
NeoBundleLazy 'DoxygenToolkit.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'DoxUndoc',
			\            'DoxAuthor',
			\            'Dox',
			\            'DoxLic',
			\            'DoxBlock'
			\        ]
			\    }
			\}
nnoremap <C-d><C-x> :Dox<CR>

" Clangでフォーマット
NeoBundleLazy 'rhysd/vim-clang-format',
			\{
			\    'autoload': {
			\        'commands': [
			\            'ClangFormat',
			\            'ClangFormatEchoFormattedCode'
			\        ]
			\    }
			\}
map ,x <Plug>(operator-clang-format)

" 一気にジャンプ {{{
NeoBundle 'Lokaltog/vim-easymotion'
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key=','
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade	ctermbg=none ctermfg=blue
"}}}

" 位置揃え {{{
NeoBundleLazy 'h1mesuke/vim-alignta',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,s:complete_command_option',
			\                'name': 'Alignta'
			\            },
			\            {
			\                'complete': 'customlist,s:complete_command_option',
			\                'name': 'Align'
			\            }
			\        ],
			\        'unite_sources': [
			\            'alignta'
			\        ]
			\    }
			\}
" Unite用Alignta設定
let g:unite_source_alignta_preset_arguments = [
			\ ["Align at '='", '=>\='],
			\ ["Align at ':'", '01 :'],
			\ ["Align at '|'", '|'	 ],
			\ ["Align at ')'", '0 )' ],
			\ ["Align at ']'", '0 ]' ],
			\ ["Align at '}'", '}'	 ],
			\]

let s:comment_leadings = '^\s*\("\|#\|/\*\|//\|<!--\)'
let g:unite_source_alignta_preset_options = [
			\ ["Justify Left",		'<<' ],
			\ ["Justify Center",	'||' ],
			\ ["Justify Right",		'>>' ],
			\ ["Justify None",		'==' ],
			\ ["Shift Left",		'<-' ],
			\ ["Shift Right",		'->' ],
			\ ["Shift Left	[Tab]", '<--'],
			\ ["Shift Right [Tab]", '-->'],
			\ ["Margin 0:0",		'0'  ],
			\ ["Margin 0:1",		'01' ],
			\ ["Margin 1:0",		'10' ],
			\ ["Margin 1:1",		'1'  ],
			\
			\ 'v/' . s:comment_leadings,
			\ 'g/' . s:comment_leadings,
			\]
unlet s:comment_leadings
"}}}

" 補完とスニペット {{{

" スニペット
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='$HOME/.vim/bundle/vim-snippets/snippets,$HOME/.vim/snippets'

" 補完 {{{

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" 補完ウィンドウの設定
set completeopt=menuone

" 補完プラグインの対応判定 {{{
function! s:meet_neocomplete_requirements()
	return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction
if s:meet_neocomplete_requirements()
	NeoBundle 'Shougo/neocomplete.vim'
	NeoBundleFetch 'Shougo/neocomplcache.vim'
else
	NeoBundleFetch 'Shougo/neocomplete.vim'
	NeoBundle 'Shougo/neocomplcache.vim'
endif
"}}}

" LUA サポートあり {{{
if s:meet_neocomplete_requirements()
	" 環境設定 {{{

	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0

	" 起動時に有効化
	let g:neocomplete#enable_at_startup			   = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplete#enable_smart_case			   = 1
	" 大文字小文字の区別を無視する
	let g:neocomplete#enable_ignore_case		   = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplete#max_list					   = 20

	let g:neocomplete#sources#syntax#min_keyword_length			   = 2
	let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

	let g:neocomplete#enable_fuzzy_completion = 1

	" Define dictionary.
	let g:neocomplete#sources#dictionary#dictionaries = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplete#keyword_patterns')
		let g:neocomplete#keyword_patterns = {}
	endif
	let g:neocomplete#keyword_patterns['default'] = '\h\w*'
	"}}}

	" キーマッピング {{{
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplete#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplete#complete_common_string()

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplete#smart_close_popup() . "\<CR>"
	endfunction

	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)
	"}}}

	" オムニ補完 {{{
	augroup SetOmniFunc
		autocmd!
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplete#sources#omni#input_patterns = {}
	endif
	let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	if !exists('g:neocomplete#force_omni_input_patterns')
		let g:neocomplete#force_omni_input_patterns = {}
	endif
	let g:neocomplete#force_overwrite_completefunc = 1
	let g:neocomplete#force_omni_input_patterns.c =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.cpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:neocomplete#force_omni_input_patterns.objc =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
	let g:neocomplete#force_omni_input_patterns.objcpp =
				\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
	let g:clang_complete_auto = 0
	let g:clang_auto_select = 0
	let g:clang_use_library   = 1
	let g:clang_library_path  = '/usr/lib/llvm-3.4/lib/'
	let g:clang_user_options  = '-std=c++11'
	"}}}
	"}}}
	" LUA サポートなし {{{
else
	" 環境設定 {{{
	" Disable AutoComplPop.
	let g:acp_enableAtStartup = 0
	" 起動時に有効化
	let g:neocomplcache_enable_at_startup			 = 1
	" 大文字が入力されるまで大文字小文字の区別を無視する
	let g:neocomplcache_enable_smart_case			 = 1
	" 大文字小文字の区別を無視する
	let g:neocomplcache_enable_ignore_case			 = 1
	" ポップアップメニューで表示される候補の数
	let g:neocomplcache_max_list					 = 20
	" シンタックスをキャッシュするときの最小文字長
	let g:neocomplcache_min_syntax_length			 = 3
	let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

	" Enable heavy features.
	" _区切りの補完を有効化
	let g:neocomplcache_enable_underbar_completion	 = 1
	" キャメルケースでの補完有効化
	let g:neocomplcache_enable_camel_case_completion = 1

	" Define dictionary.
	let g:neocomplcache_dictionary_filetype_lists = {
				\ 'default' : '',
				\ 'vimshell' : $HOME.'/.vimshell_hist',
				\ 'scheme' : $HOME.'/.gosh_completions'
				\ }

	" Define keyword.
	if !exists('g:neocomplcache_keyword_patterns')
		let g:neocomplcache_keyword_patterns = {}
	endif
	let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
	"}}}

	" キーマッピング {{{
	" 前回行われた補完をキャンセルします
	inoremap <expr><C-g> neocomplcache#undo_completion()
	" 補完候補のなかから、共通する部分を補完します
	inoremap <expr><C-l> neocomplcache#complete_common_string()
	" Recommended key-mappings.
	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
		" For no inserting <CR> key.
		"return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
	endfunction

	" <TAB>: completion.
	inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
	inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"

	" スニペットを展開する
	imap <C-e> <Plug>(neosnippet_expand_or_jump)
	smap <C-e> <Plug>(neosnippet_expand_or_jump)
	"}}}

	" オムニ補完 {{{
	augroup SetOmniFunc
		autocmd!
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	augroup END

	" Enable heavy omni completion.
	if !exists('g:neocomplcache_omni_patterns')
		let g:neocomplcache_omni_patterns = {}
	endif
	let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
	let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

	" --------------------------------------------------------
	" C言語用補完機能設定
	" --------------------------------------------------------
	" clang_completeのための設定
	" add neocomplcache option
	let g:neocomplcache_force_overwrite_completefunc=1
	let g:neocomplcache_clang_use_library=1

	if !exists('g:neocomplcache_force_omni_patterns')
		let g:neocomplcache_force_omni_patterns = {}
	endif

	" omnifunc が呼び出される場合の正規表現パターンを設定しておく
	let g:neocomplcache_force_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|::'

	" clang_complete 側の設定
	" clang_complete の自動呼び出しは必ず切っておいて下さい
	" これを設定しておかなければ補完がおかしくなります
	let g:clang_complete_auto = 0
	let g:clang_use_library   = 1
	let g:clang_library_path  = '/usr/lib/llvm-3.5/lib/'
	let g:clang_user_options  = '-std=c++11'
endif
"}}}
"}}}
"}}}

" clangによるC/C++の補完
NeoBundle 'Rip-Rip/clang_complete'
"}}}

" vim-operator {{{
NeoBundle 'kana/vim-operator-user',
			\{
			\    'autoload': {
			\        'functions': 'operator#user#define'
			\    }
			\}
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'kana/vim-textobj-indent'
NeoBundleLazy 'kana/vim-operator-replace',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'nx',
			\                '<Plug>(operator-replace)'
			\            ]
			\        ]
			\    },
			\    'depends': 'vim-operator-user'
			\}
map R  <Plug>(operator-replace)

NeoBundle 'rhysd/vim-textobj-anyblock'
NeoBundle 'thinca/vim-textobj-between'
NeoBundle 'osyo-manga/vim-textobj-multiblock'
NeoBundleLazy 'rhysd/vim-operator-surround',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'nx',
			\                '<Plug>(operator-surround'
			\            ],
			\            [
			\                'n',
			\                '<Plug>(operator-surround-repeat)'
			\            ]
			\        ]
			\    }
			\}

" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)

" delete or replace most inner surround
" if you use vim-textobj-multiblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

" if you use vim-textobj-anyblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

" if you use vim-textobj-between
nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)

NeoBundleLazy 'kana/vim-smartchr',
			\{
			\    'autoload': {
			\        'insert': 1
			\    }
			\}
NeoBundleLazy 'kana/vim-smartword',
			\{
			\    'autoload': {
			\        'mappings': [
			\            '<Plug>(smartword-'
			\        ]
			\    }
			\}
NeoBundleLazy 'kana/vim-smarttill',
			\{
			\    'autoload': {
			\        'mappings': [
			\            '<Plug>(smarttill-'
			\        ]
			\    }
			\}

NeoBundleLazy 'anyakichi/vim-surround',
			\{
			\    'autoload': {
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>Dsurround'
			\            ],
			\            [
			\                'n',
			\                '<Plug>Csurround'
			\            ],
			\            [
			\                'n',
			\                '<Plug>Ysurround'
			\            ],
			\            [
			\                'n',
			\                '<Plug>YSurround'
			\            ]
			\        ]
			\    }
			\}
if !&l:modifiable
	silent! nunmap <buffer> ds
	silent! nunmap <buffer> cs
	silent! nunmap <buffer> ys
	silent! nunmap <buffer> yS
else
	nmap <buffer> ds <Plug>Dsurround
	nmap <buffer> cs <Plug>Csurround
	nmap <buffer> ys <Plug>Ysurround
	nmap <buffer> yS <Plug>YSurround
endif
"}}}

"}}}

" 開発ツール {{{

" pythonのシンタックスチェック(QuickFix On/Off)
NeoBundleLazy 'mitechie/pyflakes-pathogen',
			\{
			\    'autoload': {
			\        'filetype': 'python'
			\    }
			\}
let pyflakes_use_quickfix = 0

" 最新のC++シンタックス情報
NeoBundle 'vim-jp/cpp-vim'

" #ifdef highlight
NeoBundle 'vim-scripts/ifdef-highlighting'

" JSON
NeoBundle 'elzr/vim-json'
NeoBundleLazy '5t111111/neat-json.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'NeatRawJson',
			\            'NeatJson'
			\        ]
			\    }
			\}

" ctags情報から型をハイライト
NeoBundleLazy 'TagHighlight',
			\{
			\    'autoload': {
			\        'commands': [
			\            'UpdateTypesFile',
			\            'ReadTypes',
			\            'UpdateTypesFileOnly',
			\            'UpdateTypesFileDebug'
			\        ]
			\    }
			\}
" tag tree
NeoBundleLazy 'majutsushi/tagbar',
			\{
			\    'augroup': 'TagbarAutoCmds',
			\    'autoload': {
			\        'commands': [
			\            'TagbarGetTypeConfig',
			\            'TagbarSetFoldlevel',
			\            'TagbarOpen',
			\            'TagbarDebug',
			\            'Tagbar',
			\            'TagbarClose',
			\            'TagbarTogglePause',
			\            'TagbarOpenAutoClose',
			\            'TagbarDebugEnd',
			\            'TagbarCurrentTag',
			\            'TagbarShowTag',
			\            'TagbarToggle'
			\        ]
			\    }
			\}

" syntacs check {{{
NeoBundle 'scrooloose/syntastic'
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntastic_c_include_dirs = ['./','/usr/include/','/usr/local/include/','/usr/include/c++/4.8/']
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_include_dirs = ['./','/usr/include/','/usr/local/include/','/usr/include/c++/4.8/']
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '--std=c++11 --stdlib=libc++'
if executable('clang++')
	let g:syntastic_cpp_compiler = 'clang++'
	let g:syntastic_cpp_compiler_options = '--std=c++11 --stdlib=libc++'
endif
augroup AutoSyntastic
	autocmd!
	autocmd BufWritePost *.c,*.cpp,*.cc,*.h,*.hpp,*.ipp,*.hh call s:syntastic()
augroup END
"}}}

"}}}

" バージョン管理 {{{

" Gitのいろいろ
NeoBundle 'tpope/vim-fugitive'

" gitの変更箇所をマークする
NeoBundleLazy 'airblade/vim-gitgutter',
			\{
			\    'autoload': {
			\        'commands': [
			\            'GitGutterToggle',
			\            'GitGutterPrevHunk',
			\            'GitGutter',
			\            'GitGutterLineHighlightsToggle',
			\            'GitGutterRevertHunk',
			\            'GitGutterPreviewHunk',
			\            'GitGutterSignsEnable',
			\            'GitGutterNextHunk',
			\            'GitGutterDisable',
			\            'GitGutterStageHunk',
			\            'GitGutterEnable',
			\            'GitGutterSignsToggle',
			\            'GitGutterAll',
			\            'GitGutterLineHighlightsEnable',
			\            'GitGutterLineHighlightsDisable',
			\            'GitGutterDebug',
			\            'GitGutterSignsDisable'
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>GitGutter'
			\            ]
			\        ]
			\    }
			\}
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '*'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_max_signs = 2000
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>

NeoBundle 'rhysd/committia.vim'

NeoBundleLazy 'Shougo/vim-vcs',
			\{
			\    'autoload': {
			\        'commands': 'Vcs'
			\    },
			\    'depends': 'thinca/vim-openbuf'
			\}

NeoBundleLazy 'yomi322/vim-gitcomplete',
			\{
			\    'autoload': {
			\        'filetype': 'vimshell'
			\    }
			\}

" git viewer
NeoBundleLazy 'Kocha/vim-unite-tig',
			\{
			\    'autoload': {
			\        'unite_sources': [
			\            'tig'
			\        ]
			\    }
			\}
NeoBundleLazy 'cohama/agit.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'custom,agit#agit_git_compl',
			\                'name': 'AgitGit'
			\            },
			\            {
			\                'complete': 'custom,agit#agit_git_compl',
			\                'name': 'AgitGitConfirm'
			\            },
			\            {
			\                'complete': 'customlist,agit#complete_command',
			\                'name': 'Agit'
			\            },
			\            {
			\                'complete': 'customlist,agit#complete_command',
			\                'name': 'AgitFile'
			\            }
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(agit-'
			\            ]
			\        ]
			\    }
			\}
"}}}

" その他独立ツール {{{

" カレンダー
NeoBundleLazy 'itchyny/calendar.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,calendar#argument#complete',
			\                'name': 'Calendar'
			\            }
			\        ],
			\        'mappings': [
			\            [
			\                'sxn',
			\                '<Plug>(calendar)'
			\            ]
			\        ]
			\    }
			\}
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
let g:calendar_frame = 'default'

" vimrcのベンチマーク
NeoBundleLazy 'mattn/benchvimrc-vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'BenchVimrc'
			\        ]
			\    }
			\}

" Twitter
NeoBundleLazy 'basyura/TweetVim',
			\{
			\    'depends' : [
			\         'basyura/twibill.vim',
			\         'tyru/open-browser.vim'
			\     ],
			\    'autoload': {
			\        'commands': [
			\            'TweetVimAccessToken',
			\            'TweetVimBitly',
			\            'TweetVimHomeTimeline',
			\            {
			\                'complete': 'custom,tweetvim#complete#screen_name',
			\                'name': 'TweetVimUserTimeline'
			\            },
			\            'TweetVimVersion',
			\            {
			\                'complete': 'custom,tweetvim#complete#search',
			\                'name': 'TweetVimSearch'
			\            },
			\            'TweetVimCurrentLineSay',
			\            'TweetVimMentions',
			\            {
			\                'complete': 'custom,tweetvim#complete#account',
			\                'name': 'TweetVimSay'
			\            },
			\            'TweetVimClearIcon',
			\            'TweetVimUserStream',
			\            {
			\                'complete': 'custom,tweetvim#complete#list',
			\                'name': 'TweetVimListStatuses'
			\            },
			\            'TweetVimMigration',
			\            'TweetVimCommandSay',
			\            {
			\                'complete': 'custom,tweetvim#complete#account',
			\                'name': 'TweetVimSwitchAccount'
			\            },
			\            'TweetVimAddAccount'
			\        ],
			\        'mappings': [
			\            [
			\                'n',
			\                '<Plug>(tweetvim_'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'tweetvim_action',
			\            'tweetvim_add_to_list',
			\            'tweetvim_switch_account',
			\            'tweetvim_timeline',
			\            'tweetvim_tweet_history'
			\        ]
			\    }
			\}

" UNDO履歴表示
NeoBundleLazy 'sjl/gundo.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            'GundoHide',
			\            'GundoShow',
			\            'GundoRenderGraph',
			\            'GundoToggle'
			\        ]
			\    }
			\}
nmap U :<C-u>GundoToggle<CR>

" リファレンス
NeoBundleLazy 'thinca/vim-ref',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,ref#complete',
			\                'name': 'Ref'
			\            },
			\            'RefHistory'
			\        ],
			\        'mappings': [
			\            [
			\                'sxn',
			\                '<Plug>(ref-keyword)'
			\            ]
			\        ],
			\        'unite_sources': [
			\            'ref'
			\        ]
			\    }
			\}

" Markdown for vim
NeoBundleLazy 'kannokanno/previm',
			\{
			\    'depends' : [
			\         'tyru/open-browser.vim'
			\     ],
			\    'autoload': {
			\        'commands': [
			\            'PrevimOpen'
			\        ]
			\    }
			\}
NeoBundleLazy 'tyru/open-browser.vim',
			\{
			\    'autoload': {
			\        'commands': [
			\            {
			\                'complete': 'customlist,openbrowser#_cmd_complete',
			\                'name': 'OpenBrowserSearch'
			\            },
			\            {
			\                'complete': 'customlist,openbrowser#_cmd_complete',
			\                'name': 'OpenBrowserSmartSearch'
			\            },
			\            'OpenBrowser'
			\        ],
			\        'mappings': [
			\            [
			\                'sxn',
			\                '<Plug>(openbrowser-'
			\            ]
			\        ]
			\    }
			\}
NeoBundleLazy 'godlygeek/tabular',
			\{
			\    'autoload': {
			\        'commands': [
			\            'AddTabularPipeline',
			\            {
			\                'complete': 'customlist,<SID>CompleteTabularizeCommand',
			\                'name': 'Tabularize'
			\            },
			\            {
			\                'complete': 'customlist,<SID>CompleteTabularizeCommand',
			\                'name': 'GTabularize'
			\            },
			\            'AddTabularPattern'
			\        ]
			\    }
			\}
NeoBundle 'joker1007/vim-markdown-quote-syntax'
NeoBundle 'rcmdnk/vim-markdown'
let g:vim_markdown_liquid=1
let g:vim_markdown_frontmatter=1
let g:vim_markdown_math=1

" TeX用Plugin {{{
NeoBundleLazy 'lervag/vim-latex',
			\{
			\    'autoload': {
			\        'filetypes': [
			\            'latex',
			\            'tex'
			\        ],
			\        'commands': [
			\            'VimLatexTocOpen',
			\            'VimLatexStop',
			\            'VimLatexErrors',
			\            'VimLatexStatus',
			\            'VimLatexCompileToggle',
			\            'VimLatexStopAll',
			\            'VimLatexCompile',
			\            'VimLatexView',
			\            'VimLatexClean',
			\            'VimLatexRefreshFolds',
			\            'VimLatexReinitialize',
			\            'VimLatexOutput',
			\            'VimLatexRSearch',
			\            'VimLatexCompileSS',
			\            'VimLatexTocToggle',
			\            'VimLatexHelp',
			\            'VimLatexInfo'
			\        ]
			\    }
			\}
let g:latex_latexmk_enabled = 1
let g:latex_latexmk_options = '-pdfdvi'

if !has('win32') || !has('win64')
	let g:latex_view_method = 'general'
	let g:latex_view_general_viewer = 'evince'
else
	let g:latex_build_dir = '.'
	let g:latex_view_enabled = 0
end

if has('win32') || has('win64')
	function! FwdSumatraPDF() "{{{
		if &ft != 'tex'
			echo "calling FwdSumatraPDF from a non-tex file"
			return ''
		end

		let tex_root_dir = g:latex#data[b:latex.id].root
		let tex_current_file = expand("%:t")
		let tex_master_file = g:latex#data[b:latex.id].tex
		let tex_output_pdf = g:latex#data[b:latex.id].out()

		if has('win32') || has('win64')
			let viewer = 'fwdsumatrapdf'
			let tex_view_cmd = 'cd /d ' . tex_root_dir . ' && '
						\ . viewer . ' "' . tex_output_pdf . '" "'
						\ . tex_current_file . '" ' . line(".")
		endif

		execute 'lcd ' . tex_root_dir
		execute 'silent! !' tex_view_cmd
		redraw!
		return ''
	endfunction "}}}
else
	function! FwdEvince() "{{{
		if &ft != 'tex'
			echo "calling FwdEvince() from a non-tex file"
			return ''
		end

		call system('fwdevince '
					\ . g:latex#data[b:latex.id].out() . " "
					\ . line(".") . " "
					\ . expand('%:p'))

		let tex_view_cmd = 'gvim -n --remote-silent +%l %f'
		return ''
	endfunction "}}}
	function! InvEvince() "{{{
		if &ft != 'tex'
			echo "calling FwdEvince() from a non-tex file"
			return ''
		end

		call system('invevince '
					\ . g:latex#data[b:latex.id].out() . " "
					\ . "gvim -n --remote-silent +%l %f")
		return ''
	endfunction "}}}
end

" fold
let g:latex_fold_parts = [
			\ 'appendix',
			\ 'frontmatter',
			\ 'mainmatter',
			\ 'backmatter',
			\ ]
let g:latex_fold_sections = [
			\ 'part',
			\ 'chapter',
			\ 'section',
			\ 'subsection',
			\ 'subsubsection',
			\ ]
let g:latex_fold_enabled = 1
let g:latex_fold_automatic = 1
let g:latex_fold_envs = 0

" for neocomplete
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patterns = {}
endif

"\ref補完(*.aux必須)
let g:neocomplete#sources#omni#input_patterns.tex =
			\'\\cite{\s*[0-9A-Za-z_:]*\|\\ref{\s*[0-9A-Za-z_:]*\|\\eqref{\s*[0-9A-Za-z_:]*'

augroup VimLaTeXKeyMap
	autocmd!
	autocmd BufNewFile,BufRead,BufEnter *.tex set iskeyword=@,48-57,_,-,:,192-255
	"autocmd BufNewFile,BufRead,BufEnter *.tex,*.bib nnoremap <buffer> tt <Esc>vi{y:tag <C-R>"<CR>

	if has('win32') || has('win64')
		autocmd BufNewFile,BufRead,BufEnter *.tex,*.bib
					\ call latex#init() | execute 'lcd ' . g:latex#data[b:latex.id].root
		autocmd FileType tex nnoremap <buffer> <silent><localleader>ls :call FwdSumatraPDF()<CR>
		autocmd FileType tex nnoremap <buffer> <silent><localleader>lv :call FwdSumatraPDF()<CR>
		autocmd BufNewFile,BufRead *.tex,*.bib nnoremap <buffer> gf <Esc>vi{gf
	else
		autocmd FileType tex nnoremap <buffer> <silent><localleader>ls :call FwdEvince()<CR>
		autocmd FileType tex nnoremap <buffer> <silent><localleader>lb :call InvEvince()<CR>
	end
augroup END

"}}}

"}}}

" カラースキーマ {{{
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'cschlueter/vim-wombat'
NeoBundle 'croaker/mustang-vim'
NeoBundle 'jeffreyiacono/vim-colors-wombat'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'vim-scripts/Lucius'
NeoBundle 'vim-scripts/Zenburn'
NeoBundle 'mrkn/mrkn256.vim'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'therubymug/vim-pyte'
NeoBundle 'tomasr/molokai'
NeoBundle 'bandit.vim'
NeoBundle 'itchyny/landscape.vim'
"NeoBundle 'abudden/EasyColour' , { 'rev' : '9d683aec8' }
NeoBundle 'skroll/vim-easycolour'
"}}}


" others {{{
command! -nargs=? -range=% -bang FSort :<line1>,<line2>call s:FSort(<bang>0, <q-args>)

function! s:FComp(lhs, rhs)
	let l:lhs = str2float(substitute(a:lhs, s:pat, "", ""))
	let l:rhs = str2float(substitute(a:rhs, s:pat, "", ""))
	return l:lhs == l:rhs ? 0 : l:lhs < l:rhs ? -1 : 1
endfunction

function! s:FCompBang(lhs, rhs)
	return -s:FComp(a:lhs, a:rhs)
endfunction

function! s:FSort(bang, ...) range
	if (a:1 != "")
		let s:pat = matchstr(a:1, '/\@<=.*/\@=')
	else
		let s:pat = '.\{-}\%\(\d\|-\)\@='
	endif

	let lines = []
	for i in range(a:firstline, a:lastline)
		call add(lines, getline(i))
	endfor
	if (a:bang)
		call sort(lines, "s:FCompBang")
	else
		call sort(lines, "s:FComp")
	endif
	for i in range(a:firstline, a:lastline)
		call setline(i, lines[i - a:firstline])
	endfor
endfunction
"}}}
