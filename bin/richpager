#!/bin/bash

pager() {
    # Cat {{{1
    # Priority is 'pygmentize', if installed
    #
    local Cat='cat'

    if type pygmentize >/dev/null 2>&1; then
        # Getting a list of available styles
        #
        # Because it could be that a plugin registered a style,
        # there is a way to iterate over all styles:
        #
    if type python >/dev/null 2>&1; then
        local get_styles="from pygments.styles import get_all_styles
        styles = list(get_all_styles())
        print '\n'.join(styles)"
        # See also <http://pygments.org/docs/styles/>

        # Getting a list of styles for shell script
        # 'sed -e ...' indent the beginning of a line space for Python
        local styles=$(echo "$get_styles" | sed -e 's/^  *//g' | python)
        local style=$(echo "$styles" | grep -x "solarized")
    fi

        local Cat="pygmentize -O style=${style:=default} -f console256 -g"
    fi

    # Less {{{1
    # Command line to invoke the (optional) input-preprocessor
    # using LESSOPEN as the $Cat
    # -> cat / pygmentize
    export LESSOPEN="| ${Cat} %s"

    # Prompt
    local Prompt=' -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%:%B..]'
    local F='-F'

    # Arguments {{{1
    local -i argc=0
    local -a argv=()
    local -a existent_files=()
    local -a non_existent_files=()

    if [[ -z $1 ]]; then
        return 11
    fi
    while (( $# > 0 ))
    do
        case "$1" in
            -*)
                if [[ "$1" =~ h ]]; then
                    echo "usage: richpager [-h][-nlp] file..."
                    echo "  -h       Show this help"
                    echo "  -n       Number the output lines, starting at 1"
                    echo "  -l       Use less nevertheless linage"
                    echo "  -p       Use plane text without pygmentize"
                    echo "  -s style Specify the style for highlighting"
                    return 0
                fi
                if [[ "$1" =~ l ]]; then
                    F=''
                fi
                if [[ "$1" =~ n ]]; then
                    N='-N'
                fi
                if [[ "$1" =~ p ]]; then
                    export LESSOPEN=''
                    Cat='cat'
                fi
                if [[ "$1" =~ s ]]; then
                    if type pygmentize >/dev/null 2>&1; then
                        if echo "$styles" | grep -q -x "${2:-NONE}" 2>/dev/null; then
                            style="$2"
                            shift
                        fi
                        Cat="pygmentize -O style=$style -f console256 -g"
                    else
                        echo "This -s option needs Pygments" 1>&2
                        return 1
                    fi
                fi

                # Option -* shift
                shift
                ;;
            *)
                ((++argc))
                argv=("${argv[@]}" "$1")
                    if [[ -e $1 ]]; then
                        existent_files=("${existent_files[@]}" "$1")
                    else
                        non_existent_files=("${non_existent_files[@]}" "$1")
                        #non_existent_files=
                    fi
                shift
                ;;
        esac
    done

    # Main {{{1
    export LESS="-R -i -f -X $F $N $Prompt"

    if [ -p /dev/stdin ]; then
        ${Cat} | less
    else
        if ((argc == 1)); then
            less "${existent_files[0]}"
        else
            for f in "${existent_files[@]}"
            do
                ${Cat} "$f" &
            done | less
        fi
    fi

    local -i error
    local file

    # In case of files that do not exist
    for file in "${non_existent_files[@]}"
    do
        error=1
        echo "$file: no such file or directory" 1>&2
    done

    if [ "$error" == 1 ]; then
        return 1
    fi
}

pager "$@"

# vim: expandtab fdc=3 ts=4 sw=4 sts=4:
